// <auto-generated />
using System;
using Database.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("Domain.Model.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TestResultId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestResultId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Domain.Model.Device", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Domain.Model.Question", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Question1")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("Question");

                    b.Property<ushort?>("TestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Domain.Model.Test", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_Tests_Id")
                        .IsUnique();

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Domain.Model.TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalComment")
                        .HasColumnType("TEXT");

                    b.Property<string>("Apparat")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp");

                    b.Property<bool>("IsPaused")
                        .HasColumnType("INTEGER");

                    b.Property<byte?>("PausedQuestionNumber")
                        .HasColumnType("INTEGER");

                    b.Property<ushort?>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .HasColumnType("TEXT")
                        .HasColumnName("Release");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Date" }, "IX_TestResult_Date");

                    b.HasIndex(new[] { "IsPaused" }, "IX_TestResult_IsPaused");

                    b.HasIndex(new[] { "Id" }, "IX_TestResults_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "Version" }, "IX_TestResults_Version");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("Domain.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("FIO");

                    b.Property<long>("TgId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "TgId" }, "IX_Tg_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "TgId" }, "IX_User_Id")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Model.Answer", b =>
                {
                    b.HasOne("Domain.Model.TestResult", "TestResult")
                        .WithMany("Answers")
                        .HasForeignKey("TestResultId");

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("Domain.Model.Question", b =>
                {
                    b.HasOne("Domain.Model.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Model.TestResult", b =>
                {
                    b.HasOne("Domain.Model.Test", "Test")
                        .WithMany("TestResult")
                        .HasForeignKey("TestId");

                    b.HasOne("Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Model.Test", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("Domain.Model.TestResult", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
